Assignment 1

1.Generate graph G with vertex(node) set {1,2,3,4,5} and the edge set {(1,5), (1,3),(1,2),(2,3),(2,4), (3,4), (4,5)} . Draw graph G.
->import networkx as nx
import matplotlib.pyplot as plt

# 1. Generate graph G
G = nx.Graph()
G.add_nodes_from([1, 2, 3, 4, 5])
G.add_edges_from([(1, 5), (1, 3), (1, 2), (2, 3), (2, 4), (3, 4), (4, 5)])
nx.draw(G, with_labels=True)
plt.show()

2. Generate graph G1 with vertex set { ‘a’,’b’,’c’,’d’} and the edge set {x=(‘a’, ’d’), y=(’b’,’c’), z=( ’b’,’’d’), w =( ‘a’,’c’)}. Draw graph G1 showing labeled vertices and edges
-># 2 Generate graph G1
G1 = nx.Graph()
G1.add_nodes_from(['a', 'b', 'c', 'd'])
G1.add_edges_from([('a', 'd'), ('b', 'c'), ('b', 'd'), ('a', 'c')])
pos = nx.spring_layout(G1)
nx.draw(G1, pos, with_labels=True, node_color='lightblue', edge_color='gray')
labels = nx.get_edge_attributes(G1, 'weight')
nx.draw_networkx_edge_labels(G1, pos, edge_labels=labels)
plt.show()

3 Generate graph G2 with vertex set {1,2,3,4,5} and edge set {(4,5),(5,3), (2, 2),(2,3),(2,4), (3,4), (1,5)} . Draw graph G2 with vertices in red colour and edges in green.
-> # Generate graph G2
G2 = nx.Graph()
G2.add_nodes_from([1, 2, 3, 4, 5])
G2.add_edges_from([(4, 5), (5, 3), (2, 2), (2, 3), (2, 4), (3, 4), (1, 5)])
nx.draw(G2, node_color='red', edge_color='green', with_labels=True)
plt.show()

4Find the number of vertices, number of edges and degrees of all vertices in above graphs.
->	# Generate graph G2
print("Graph G:")
print("Number of vertices:", G.number_of_nodes())
print("Number of edges:", G.number_of_edges())
print("Degrees of all vertices:", dict(G.degree()))

print("\nGraph G1:")
print("Number of vertices:", G1.number_of_nodes())
print("Number of edges:", G1.number_of_edges())
print("Degrees of all vertices:", dict(G1.degree()))

print("\nGraph G2:")
print("Number of vertices:", G2.number_of_nodes())
print("Number of edges:", G2.number_of_edges())
print("Degrees of all vertices:", dict(G2.degree()))

5 Verify Hand shaking lemma for above graphs
-># 5. Verify Handshaking Lemma
def handshaking_lemma(G):
    sum_degrees = sum(dict(G.degree()).values())
    return sum_degrees == 2 * G.number_of_edges()

print("\nHandshaking Lemma Verification:")
print("Graph G:", handshaking_lemma(G))
print("Graph G1:", handshaking_lemma(G1))
print("Graph G2:", handshaking_lemma(G2))
